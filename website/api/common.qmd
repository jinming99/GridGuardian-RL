---
title: "Common Utilities"
sidebar: api
---

## Environment Management

### `create_ev_env`

Standard factory for EV charging environments.

```python
create_ev_env(
    site: str,
    date_range: Tuple[str, str],
    seed: int = 0,
    safe_rl: bool = False,
    flatten: bool = False,
    noise: float = 0.0,
    noise_action: float = 0.0,
    **env_kwargs
)
```

**Parameters:**

| Name | Type | Description |
|------|------|-------------|
| `site` | `str` | 'caltech' or 'jpl' |
| `date_range` | `tuple` | ('YYYY-MM-DD', 'YYYY-MM-DD') |
| `safe_rl` | `bool` | Flatten for OmniSafe compatibility |
| `noise` | `float` | Observation noise [0,1] |
| `noise_action` | `float` | Action noise [0,1] |

**Example:**
```python
env = create_ev_env(
    site='caltech',
    date_range=('2022-01-01', '2022-01-07'),
    noise=0.1
)
```

---

## Policy Wrappers

### `wrap_policy`

Universal interface adapter for different policy formats.

```python
wrap_policy(policy_or_model) -> Callable[[obs], action]
```

**Supports:**
- Callable functions
- Objects with `.get_action()`
- Objects with `.predict()`
- Objects with `.act()`

**Example:**
```python
# Works with any interface
policy_fn = wrap_policy(model)
action = policy_fn(obs)
```

### `wrap_ma_policy`

Multi-agent version returning `Dict[agent_id, action]`.

```python
ma_policy_fn = wrap_ma_policy(ma_model)
actions = ma_policy_fn(obs_dict)  # Dict[agent_id, obs] -> Dict[agent_id, action]
```

---

## Environment Wrappers

### `DictFlatteningWrapper`

Convert Dict observation spaces to Box.

```python
wrapped_env = DictFlatteningWrapper(env)
# Now obs is np.ndarray instead of dict
```

### `make_vec_envs`

Create vectorized environments.

```python
vec_envs = make_vec_envs(
    env_id='EVCharging-v0',
    num_envs=4,
    seed=0,
    device='cpu',
    wrapper_fn=None
)
```

---

## Data Extraction

### `extract_from_obs`

Extract component from any observation format.

```python
demands = extract_from_obs(obs, 'demands', env_space)
# Works with both Dict and flattened observations
```

---

## Optimization Helpers

### `solve_cvx_with_fallback`

Robust CVXPY solving with automatic fallback.

```python
result = solve_cvx_with_fallback(
    prob,
    solvers=['MOSEK', 'SCS', 'OSQP'],
    verbose=False
)
```

**Features:**
- Tries solvers in order
- Graceful degradation
- Returns solution status

---

## Utility Functions

### `set_random_seed`

Reproducibility helper.

```python
set_random_seed(42)
# Sets: numpy, random, torch (if available)
```

### `get_obs_shape` / `get_action_dim`

Space introspection utilities.

```python
obs_shape = get_obs_shape(env.observation_space)
act_dim = get_action_dim(env.action_space)
```

---

## Cache Management

### Directory Structure
```python
get_cache_dir(kind='rl')  # Returns: ./cache/rl/
# Override with: export TUTORIALS_CACHE_DIR=/custom/path
```

**Standard kinds:**
- `'baselines'`: Baseline controllers
- `'rl'`: Standard RL
- `'safe_rl'`: Constrained MDPs  
- `'marl'`: Multi-agent

### Path Helpers
```python
path = cache_path(kind='rl', tag='exp001', suffix='model')
# Returns: ./cache/rl/exp001_model.pt
```

---

## Configuration

### `create_experiment_config`

Standardized experiment records.

```python
config = create_experiment_config(
    algorithm='PPO',
    env_config={'site': 'caltech'},
    hyperparams={'lr': 3e-4, 'batch_size': 64},
    seed=42
)
```

**Returns:**
```python
{
    'algorithm': 'PPO',
    'env_config': {...},
    'hyperparams': {...},
    'seed': 42,
    'timestamp': '2025-01-01T12:00:00'
}
```